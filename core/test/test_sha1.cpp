#include "core/sha1.h"
#include "gtest/gtest.h"

#include <cstring>

static std::string operator*(std::string str, std::size_t n) {
  std::string res{};
  while (n--) {
    res += str;
  }

  return res;
}

TEST(SHA1, Copy) {
  std::array<uint8_t, 20> x{0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81,
                            0x6a, 0xba, 0x3e, 0x25, 0x71, 0x78, 0x50,
                            0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d};

  auto hash = cactus::SHA1::copy(x.data());

  EXPECT_EQ(std::memcmp(hash.begin(), x.data(), cactus::SHA1::hash_size), 0)
      << "Failed to copy initialize SHA1 hash";
}

TEST(SHA1, Comparisons) {
  std::array<uint8_t, 20> x{0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81,
                            0x6a, 0xba, 0x3e, 0x25, 0x71, 0x78, 0x50,
                            0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d};

  auto hash1 = cactus::SHA1::copy(x.data());
  x[0] += 10;
  auto hash2 = cactus::SHA1::copy(x.data());
  x[0] -= 10;
  auto hash3 = cactus::SHA1::copy(x.data());

  EXPECT_TRUE(hash1 == hash3);
  EXPECT_TRUE(hash2 != hash3);
  EXPECT_TRUE(hash1 != hash2);
}

TEST(SHA1, HashComputation) {
  // https://www.di-mgt.com.au/sha_testvectors.html
  // clang-format off
  std::vector<std::pair<std::string, std::array<uint8_t, 20>>> test_cases{
    {"abc",
      {0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81, 0x6a, 0xba, 0x3e,
       0x25, 0x71, 0x78, 0x50, 0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d}},

    {"",
      {0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55,
       0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09}},

    {"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
      {0x84, 0x98, 0x3e, 0x44, 0x1c, 0x3b, 0xd2, 0x6e, 0xba, 0xae,
       0x4a, 0xa1, 0xf9, 0x51, 0x29, 0xe5, 0xe5, 0x46, 0x70, 0xf1}},

    {"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
      {0xa4, 0x9b, 0x24, 0x46, 0xa0, 0x2c, 0x64, 0x5b, 0xf4, 0x19,
       0xf9, 0x95, 0xb6, 0x70, 0x91, 0x25, 0x3a, 0x04, 0xa2, 0x59}},

    {std::string("a") * 1000000,
      {0x34, 0xaa, 0x97, 0x3c, 0xd4, 0xc4, 0xda, 0xa4, 0xf6, 0x1e,
       0xeb, 0x2b, 0xdb, 0xad, 0x27, 0x31, 0x65, 0x34, 0x01, 0x6f}},

    {std::string("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno") * 16777216,
      {0x77, 0x89, 0xf0, 0xc9, 0xef, 0x7b, 0xfc, 0x40, 0xd9, 0x33,
       0x11, 0x14, 0x3d, 0xfb, 0xe6, 0x9e, 0x20, 0x17, 0xf5, 0x92}}
  };
  // clang-format on

  for (std::size_t i{0}; i < test_cases.size(); i++) {
    auto &[str, h] = test_cases[i];
    EXPECT_EQ(cactus::SHA1::compute(str.data(), str.size()),
              cactus::SHA1::copy(h.data()))
        << "SHA1 computation failed, test index: " << i;
  }
}
